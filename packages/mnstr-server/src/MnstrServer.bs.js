// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Morgan = require("morgan");
var Express = require("bs-express/src/Express.js");
var BodyParser = require("body-parser");
var MnstrServerUtils = require("./MnstrServerUtils.bs.js");
var MnstrServerRouter = require("./MnstrServerRouter.bs.js");
var MnstrServerAdapters = require("./MnstrServerAdapters.bs.js");

var Adapters = /* module */[/* Express */MnstrServerAdapters.Express];

var Router = /* module */[
  /* resolve */MnstrServerRouter.resolve,
  /* Web */MnstrServerRouter.Web
];

function make(middleware, routes, $staropt$star, port, $staropt$star$1, onListen, _) {
  var bodyLimit = $staropt$star ? $staropt$star[0] : "100kb";
  var isDev = $staropt$star$1 ? $staropt$star$1[0] : /* false */0;
  var app = Express.App[/* make */15](/* () */0);
  var default_000 = /* Use */Block.__(0, [isDev !== 0 ? Morgan("dev") : Morgan("combined")]);
  var default_001 = /* :: */[
    /* Use */Block.__(0, [BodyParser.json({
              limit: bodyLimit
            })]),
    /* :: */[
      isDev !== 0 ? /* UseOnPath */Block.__(1, [
            "/graphiql",
            MnstrServerAdapters.Express[/* GraphQl */3][/* graphiql */0]
          ]) : /* NoOp */0,
      /* :: */[
        /* Use */Block.__(0, [MnstrServerRouter.Web[/* make */0](routes, /* () */0)]),
        /* :: */[
          /* Use */Block.__(0, [MnstrServerUtils.Http[/* handleErrors */2](isDev)]),
          /* [] */0
        ]
      ]
    ]
  ];
  var $$default = /* :: */[
    default_000,
    default_001
  ];
  List.iter((function (maybe) {
          if (typeof maybe === "number") {
            return /* () */0;
          } else if (maybe.tag) {
            return Curry._3(Express.App[/* useOnPath */2], app, maybe[0], maybe[1]);
          } else {
            return Curry._2(Express.App[/* use */0], app, maybe[0]);
          }
        }), middleware ? Curry._1(middleware[0], $$default) : $$default);
  return Express.App[/* listen */19](app, port, onListen, /* () */0);
}

var Http = /* module */[
  /* App */0,
  /* Middleware */0,
  /* Response */0,
  /* make */make
];

var Utils = /* module */[
  /* Http */MnstrServerUtils.Http,
  /* Database */MnstrServerUtils.Database
];

exports.Adapters = Adapters;
exports.Router = Router;
exports.Http = Http;
exports.Utils = Utils;
/* morgan Not a pure module */
